"""
Character commands

"""
import discord

from discord import app_commands
from discord.app_commands import Transform
from discord.ext import commands
from typing import Optional

from .. import config
from .utils import errors, io
from .utils.parameters import autocomplete_chars, MapleIOURLTransformer
from ..mapleio.character import Character


class Characters(commands.Cog):
    # groups get added in CogMeta. Just used for naming
    swap_group = app_commands.Group(name='swap',
                                    description='Swap things')

    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name='import')
    async def _import(
            self,
            interaction: discord.Interaction,
            name: str,
            url: Optional[Transform[str, MapleIOURLTransformer]] = None,
            json: Optional[discord.Attachment] = None
    ) -> None:
        """
        Register a new character. Data from maplestory.studio

        Requires either a `https://maplestory.io/api/character` url or a JSON
        file defining character data, both of which can be retrieved from
        `maplestory.studio`.  To get the url, right click your character and
        click "Copy Image Address".  The JSON file can be generated by
        exporting your character.

        Parameters
        ----------
        interaction: discord.Interaction
        name: Optional[str]
            name of character to import
        url: Optional[Transform[str, MapleIOURLTransformer]]:
            https://maplestory.io/api/character url with character data
        json: Optional[discord.Attachment]
            JSON file containing character data

        """
        # Must supply source data
        if not (url or json):
            url = f'{config.mapleio.api_url}/character'
            msg = ('No source data was found. Please supply either a JSON file'
                   f'with character data or a `{url}` url')
            raise errors.MissingArgument(msg)

        await self.bot.defer(interaction)

        # determine src
        if url:  # maplestory.io char api
            parser = Character.from_url
            src = url
        elif json.filename.endswith('.json'):  # json output of sim and studio
            parser = Character.from_json
            src = await self.bot.download(json.url, errors.DiscordIOError)
        else:
            msg = 'Only JSON files are accepted'
            raise errors.UnexpectedFileTypeError(msg)

        # parse char data
        try:
            char = parser(src)
            char.name = name
        except Exception:
            raise errors.CharacterParseError

        # query database
        user = await self.bot.db.get_user(interaction.user.id)

        if not user:  # new user
            char_data = char.to_dict()
            ret = await self.bot.db.add_user(interaction.user.id, char_data)
        else:
            # check if char exists
            chars = user['chars']
            _iter = (i for i, c in enumerate(chars) if c['name'] == name)
            i = next(_iter, None)

            if i is not None:  # exists; prompt if want to replace
                text = f'**{name}** already exists. Replace?'
                if not await io.confirm_prompt(interaction, text):  # timeout or no
                    text = f'{name} was **not** replaced'
                    await self.bot.followup(interaction, content=text, view=None)
                    return

                char.copy_info(chars[i])
                chars[i] = char.to_dict()
            elif len(user['chars']) < config.core.max_chars:  # has empty space
                i = len(user['chars'])
                chars.append(char.to_dict())
            else:  # too many chars; replace?
                title = 'Max Characters Reached'
                text = (f'{config.core.bot_name} can only save '
                        f'{config.core.max_chars} character(s). Choose a '
                        'character to replace.')
                i = await io.get_char_index(interaction, user,
                                            title=title, text=text)

                if i is not None:
                    chars[i] = char.to_dict()
                else:
                    text = f'**{name}** was not saved'
                    await self.bot.followup(interaction, content=text, view=None)
                    return

            update = {'chars': chars}

            # set default?
            text = f'Do you want to set {name} as default?'
            if await io.confirm_prompt(interaction, text):
                update.update({'default': i})

            # update database
            ret = await self.bot.db.set_user(interaction.user.id, update)

        if ret and ret.acknowledged:
            text = f'**{name}** has been successfully mushed'
            await self.bot.followup(interaction, content=text, view=None)
        else:
            raise errors.DatabaseWriteError

    @app_commands.command()
    @app_commands.autocomplete(char=autocomplete_chars)
    async def delete(
            self,
            interaction: discord.Interaction,
            char: str
    ) -> None:
        """
        Delete the specified character

        Parameters
        ----------
        interaction: discord.Interaction
        char: str
            the character to delete

        """
        await self.bot.defer(interaction)
        user = await self.bot.db.get_user(interaction.user.id)

        if not user or not user['chars']:
            raise errors.NoMoreItems

        default_i = user['default']
        del_i = await io.get_char_index(interaction, user, name=char)

        # remove char and handle default
        if del_i < default_i:
            default_i -= 1  # decrement
        elif del_i == default_i:
            default_i = 0  # if deleted default, set to first

        char = user['chars'].pop(del_i)
        update = {'default': default_i, 'chars': user['chars']}
        ret = await self.bot.db.set_user(interaction.user.id, update)

        if ret.acknowledged:
            text = f'**{char["name"]}** was deleted'
            await self.bot.followup(interaction, content=text)
        else:
            raise errors.DataWriteError

    @app_commands.command()
    @app_commands.autocomplete(char=autocomplete_chars)
    async def rename(
            self,
            interaction: discord.Interaction,
            char: str,
            name: str
    ):
        """
        Rename a character with the new name given

        Parameters
        ----------
        interaction: discord.Interaction
        char: str
            the character to rename
        name: str
            new character name

        """
        await self.bot.defer(interaction)
        user = await self.bot.db.get_user(interaction.user.id)

        if not user or not user['chars']:
            raise errors.NoMoreItems

        # check if new_name exists
        if name in [c['name'] for c in user['chars']]:
            raise errors.CharacterAlreadyExists

        # get char to replace
        i = await io.get_char_index(interaction, user, name=char)

        user['chars'][i]['name'] = name
        update = {'chars': user['chars']}
        ret = await self.bot.db.set_user(interaction.user.id, update)

        if ret.acknowledged:
            text = f'**{char}** was renamed **{name}**'
            await self.bot.followup(interaction, content=text)
        else:
            raise errors.DataWriteError

    @swap_group.command(name='outfit')
    @app_commands.rename(with_char='with')
    @app_commands.autocomplete(with_char=autocomplete_chars)
    async def swap_outfit(
            self,
            interaction: discord.Interaction,
            with_char: str
    ):
        """
        Swap all style elements with specified character

        Parameters
        ----------
        interaction: discord.Interaction
        with_char: str
            the character to swap with

        """
        await self.bot.defer(interaction)
        user = await self.bot.db.get_user(interaction.user.id)

        if not user or not user['chars']:
            raise errors.NoMoreItems

        # get char data
        default_i = user['default']
        swap_i = await io.get_char_index(interaction, user, name=with_char)
        default = Character.from_json(user['chars'][default_i])
        swap = Character.from_json(user['chars'][swap_i])

        # swap
        tmp = default.to_dict()
        default.copy_style(swap)
        swap.copy_style(tmp)

        # push to db
        user['chars'][default_i] = default.to_dict()
        user['chars'][swap_i] = swap.to_dict()
        update = {'chars': user['chars']}
        ret = await self.bot.db.set_user(interaction.user.id, update)

        if ret.acknowledged:
            text = f'**{default.name}** swapped appearance with **{swap.name}**'
            await self.bot.followup(interaction, content=text)
        else:
            raise errors.DataWriteError


async def setup(bot):
    await bot.add_cog(Characters(bot))
