"""
Import character commands

"""
import discord

from discord.ext import commands
from discord import app_commands
from typing import Optional, Union

from .. import config
from . import errors
from .utils import converters, io
from ..mapleio.character import Character

from discord.app_commands import Transform
from .utils.transformers import MapleIOURLTransformer


class Import(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name='import')
    async def _import(
            self,
            interaction: discord.Interaction,
            name: str,
            url: Optional[Transform[str, MapleIOURLTransformer]] = None,
            json: Optional[discord.Attachment] = None
    ) -> None:
        """
        Register a new character. Data from maplestory.studio

        Requires either a `https://maplestory.io/api/character` url or a JSON
        file defining character data, both of which can be retrieved from
        `maplestory.studio`.  To get the url, right click your character and
        click "Copy Image Address".  The JSON file can be generated by
        exporting your character.

        Parameters
        ----------
        interaction: discord.Interaction
        name: Optional[str]
            name of character to import
        url: Optional[Transform[str, MapleIOURLTransformer]]:
            https://maplestory.io/api/character url with character data
        json: Optional[discord.Attachment]
            JSON file containing character data

        """
        # Must supply source data
        if not (url or json):
            raise errors.MissingArgument

        await self.bot.defer(interaction)

        # determine src
        if url:  # maplestory.io char api
            parser = Character.from_url
            src = url
        elif json.filename.endswith('.json'):  # json output of sim and studio
            parser = Character.from_json
            src = await self.bot.download(json.url, errors.DiscordIOError)
        else:
            raise errors.UnexpectedFileTypeError

        # parse char data
        try:
            char = parser(src)
            char.name = name
        except Exception:
            raise errors.CharacterParseError

        # query database
        user = await self.bot.db.get_user(interaction.user.id)

        if not user:  # new user
            char_data = char.to_dict()
            ret = await self.bot.db.add_user(interaction.user.id, char_data)
        else:
            # check if char exists
            chars = user['chars']
            _iter = (i for i, c in enumerate(chars) if c['name'] == name)
            i = next(_iter, None)
            prompt = None  # keep track of messages sent

            if i is not None:  # exists; prompt if want to replace
                text = f'**{name}** already exists. Replace?'
                replace = await io.confirm_prompt(interaction, text)
                self.copy_info(chars[i], char)
                chars[i] = char.to_dict()

                if not replace:  # timeout or no
                    text = f'{name} was **not** replaced'
                    await self.bot.followup(interaction, content=text, view=None)
                    return

            elif len(user['chars']) < config.core.max_chars:  # has empty space
                chars.append(char.to_dict())
            else:  # too many chars; replace?
                title = 'Max Characters Reached'
                text = (f'{config.core.bot_name} can only save '
                        f'{config.core.max_chars} character(s). Choose a '
                        'character to replace.')
                i = await io.get_char_index(interaction, user,
                                            title=title, text=text)

                if i is not None:
                    chars[i] = char.to_dict()
                else:
                    text = f'**{name}** was not saved'
                    await self.bot.followup(interaction, content=text, view=None)
                    return

            # update database
            update = {'chars': chars}
            ret = await self.bot.db.set_user(interaction.user.id, update)

        if ret and ret.acknowledged:
            text = f'**{name}** has been successfully mushed'
            await self.bot.followup(interaction, content=text, view=None)
        else:
            raise errors.DatabaseWriteError

    @staticmethod
    def copy_info(
            source: Union[Character, dict],
            target: Character
    ) -> None:
        """
        Copy char info from source to target. Does not copy pose/emotion

        Parameters
        ----------
        source: Union[Character, dict]
            the source character
        target: Character
            the target character

        """
        if isinstance(source, dict):
            source = Character.from_json(source)

        for flag in converters.InfoFlags.get_flags().values():
            if flag.attribute not in ['action', 'emotion']:
                value = getattr(source, flag.attribute)
                setattr(target, flag.attribute, value)


async def setup(bot):
    await bot.add_cog(Import(bot))
